global device ML_STAR ("OnePlateToPlate.lay", "ML_STAR", hslTrue);
 namespace _Method { #include "HSLSeqLib.hsl" } 
 namespace _Method { #include "HSLTrcLib.hsl" } 
 namespace _Method { #include "HSLArrLib.hsl" } 
 namespace _Method { #include "HSLFilLib.hsl" } 
 namespace _Method { #include "HSLMlStarStepReturnLib.hsl" } 
#include "OnePlateToPlate.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "e65864b7_d06d_4fb3_92438fb26f33f065" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 2 1 0 "e7900ada_e8de_47f5_8ce2f9a97bd1a048" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 3 1 0 "30a831e2_4b07_46fa_8f518d11ddfed2a8" "ML_STAR:{1C0C0CB0-7C87-11D3-AD83-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._1C0C0CB0_7C87_11D3_AD83_0004ACB1DCB2("30a831e2_4b07_46fa_8f518d11ddfed2a8"); // Initialize
}
// }} ""
// {{ 4 1 0 "9e8a5548_bd50_4887_bfe480a502b42c59" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 5 1 0 "54161494_8c85_4ae9_841b0208208615f8" "{E6776CB1-4681-40c6-B8A1-A538D6138CBA}"
PTL::ResetLoadingStateAndSequences();
PTL::SetLoadingState("UserResponseTime", hslInfinite);
PTL::SetLoadingState("ErrorHandling", 3);
PTL::SetLoadingState("CalibrateCarrierChannel", -1);
PTL::SetLoadingSize(3);
PTL::SetLoadingSequence(0, ML_STAR.Source, 1, -10, hslTrue, hslFalse, "");
PTL::SetLoadingSequence(1, ML_STAR.Target, 1, -10, hslTrue, hslFalse, "");
PTL::SetLoadingSequence(2, ML_STAR.MlStar300ulStandardVolumeTip, 1, -10, hslTrue, hslFalse, "");
if( 0 == PTL::Load(ML_STAR, hslTrue) )
{
    PTL::RaiseRuntimeError(-1556872960, PTL::IDS::smartStepLoad, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
PTL::GetLoadingSequence(0, ML_STAR.Source);
PTL::GetLoadingSequence(1, ML_STAR.Target);
PTL::GetLoadingSequence(2, ML_STAR.MlStar300ulStandardVolumeTip);
// }} ""
// {{ 6 1 0 "85890b95_37b1_4549_8ab345687b36730e" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 7 1 0 "53e30f2a_7112_4070_9ed07b320d61f33c" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 1);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 2);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslTrue);
PTL::SetPipettingState("DispenseSequenceReducible", hslTrue);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.MlStar300ulStandardVolumeTip, ML_STAR.Source, ML_STAR.Target, 1, 1, 50, 0, 1, hslInfinite, hslInfinite, 1, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
// {{ 8 1 0 "b12e246b_6e17_4e36_a616875cc51ba576" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 9 1 0 "4c297562_d3ee_40b3_a020a8f4bf7c8caf" "{CB6F8FE9-BCEF-434c-863A-A7DE77ACFB6E}"
PTL::ResetUnloadingStateAndSequences();
PTL::SetUnloadingState("UserResponseTime", hslInfinite);
PTL::SetUnloadingState("ErrorHandling", 3);
PTL::SetUnloadingSize(3);
PTL::SetUnloadingSequence(0, ML_STAR.MlStar300ulStandardVolumeTip, hslFalse, "");
PTL::SetUnloadingSequence(1, ML_STAR.Target, hslFalse, "");
PTL::SetUnloadingSequence(2, ML_STAR.Source, hslFalse, "");
if( 0 == PTL::Unload(ML_STAR) )
{
    PTL::RaiseRuntimeError(-1540095744, PTL::IDS::smartStepUnload, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
PTL::GetUnloadingSequence(0, ML_STAR.MlStar300ulStandardVolumeTip);
PTL::GetUnloadingSequence(1, ML_STAR.Target);
PTL::GetUnloadingSequence(2, ML_STAR.Source);
// }} ""
// {{ 2 "AutoExitBlock" ""
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Sophytes$$valid=0$$time=2020-12-23 23:34$$checksum=df784036$$length=087$$