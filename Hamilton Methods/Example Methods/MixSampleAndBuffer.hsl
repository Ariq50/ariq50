global device ML_STAR ("MixSampleAndBuffer.lay", "ML_STAR", hslTrue);
#include "MixSampleAndBuffer.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
// {{ 2 "AutoWorkflow" ""
// AutoWorkflow for method with actions.
#ifndef HSL_ACTION_METHOD
   #define HSL_ACTION_METHOD 1
#endif
#ifndef HSL_SCHEDULE
   schedulerprompt = 2;
   workflow __AutoWorkflow__() void { _Method::HSLMETEDLib::ExecuteMethod( GetFileName()); }
#endif
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "62058b00_a867_4563_8a2e64b1720da6a5" "{4FB3C56D-3EF5-4317-8A5B-7CDFAC1CAC8F}"
{
actionblock( 120, 16711935, Translate( "Load" ), 0, "{62681E0F-B9FB-4F29-B612-84F228E6E372}") {
{ timer __consume_duration_timer("", GetCurrentActivityViewName()); if (GetSimulationMode( ) != 0)
{  __consume_duration_timer.SetTimer( GetCurrentActivityDuration()); }

// }} ""
// {{ 2 1 0 "893b3225_3ce4_4997_82fe6962adee7e1b" "{E6776CB1-4681-40c6-B8A1-A538D6138CBA}"
PTL::ResetLoadingStateAndSequences();
PTL::SetLoadingState("UserResponseTime", hslInfinite);
PTL::SetLoadingState("ErrorHandling", 3);
PTL::SetLoadingState("CalibrateCarrierChannel", -1);
PTL::SetLoadingSize(4);
PTL::SetLoadingSequence(0, ML_STAR.Tips, 1, -10, hslTrue, hslFalse, "");
PTL::SetLoadingSequence(1, ML_STAR.Reagent, 1, -10, hslTrue, hslFalse, "");
PTL::SetLoadingSequence(2, ML_STAR.Samples, 1, -10, hslTrue, hslFalse, "");
PTL::SetLoadingSequence(3, ML_STAR.TargetPlate, 1, -10, hslTrue, hslFalse, "");
if( 0 == PTL::Load(ML_STAR, hslTrue) )
{
    PTL::RaiseRuntimeError(-1556872960, PTL::IDS::smartStepLoad, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
PTL::GetLoadingSequence(0, ML_STAR.Tips);
PTL::GetLoadingSequence(1, ML_STAR.Reagent);
PTL::GetLoadingSequence(2, ML_STAR.Samples);
PTL::GetLoadingSequence(3, ML_STAR.TargetPlate);
// }} ""
// {{ 3 1 0 "62058b00_a867_4563_8a2e64b1720da6a5" "{4FB3C56D-3EF5-4317-8A5B-7CDFAC1CAC8F}"
if (GetSimulationMode( ) != 0)
{ __consume_duration_timer.WaitTimer( hslFalse, hslFalse ); } }
 } oncancelaction {
HSLMETEDLib::HandleCanceledAction( Translate( "Load" ) );
 } }

// }} ""
// {{ 4 1 0 "d15d9710_8ab9_4c41_8b773a8ac2175032" "{4FB3C56D-3EF5-4317-8A5B-7CDFAC1CAC8F}"
{
actionblock( 240, 16711680, Translate( "Pipette 1000ul Channels" ), 0, "{D4CA5533-5408-4002-8DCC-D879AF669F2C}") {
{ timer __consume_duration_timer("", GetCurrentActivityViewName()); if (GetSimulationMode( ) != 0)
{  __consume_duration_timer.SetTimer( GetCurrentActivityDuration()); }

// }} ""
// {{ 5 1 0 "0ff74ed6_52de_40be_ab7954a4f6e24957" "{AB5187D8-1728-4c30-A7D6-E0B0D082DB80}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_EtOH_DispenseJet_Part");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_EtOH_DispenseJet_Part");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 5);
PTL::SetPipettingState("AliquotEnabled", hslTrue);
PTL::SetPipettingState("AliquotPreAspirateVolume", 50);
PTL::SetPipettingState("AliquotAspirateDefaultMixingEnabled", hslTrue);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.Tips, ML_STAR.Reagent, ML_STAR.TargetPlate, 1, 1, 50, 50, 2, hslInfinite, hslInfinite, hslInfinite, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
// {{ 6 1 0 "d15d9710_8ab9_4c41_8b773a8ac2175032" "{4FB3C56D-3EF5-4317-8A5B-7CDFAC1CAC8F}"
if (GetSimulationMode( ) != 0)
{ __consume_duration_timer.WaitTimer( hslFalse, hslFalse ); } }
 } oncancelaction {
HSLMETEDLib::HandleCanceledAction( Translate( "Pipette 1000ul Channels" ) );
 } }

// }} ""
// {{ 7 1 0 "93b864f0_288b_4713_97baaf0a1ce7b1f6" "{4FB3C56D-3EF5-4317-8A5B-7CDFAC1CAC8F}"
{
actionblock( 300, 16711680, Translate( "Pipette 1000ul Channels" ), 0, "{D48A4B48-6489-401C-B69A-CA22CF4032E0}") {
{ timer __consume_duration_timer("", GetCurrentActivityViewName()); if (GetSimulationMode( ) != 0)
{  __consume_duration_timer.SetTimer( GetCurrentActivityDuration()); }

// }} ""
// {{ 8 1 0 "5489ca64_85c5_419e_b1a2d2fa825943ea" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolumePlasmaDispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 2);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolumePlasmaDispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslTrue);
PTL::SetPipettingState("DispenseSequenceReducible", hslTrue);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
PTL::SetPipettingState("DispensePrerinsingMixCycles", 3);
PTL::SetPipettingState("DispensePrerinsingMixPosition", 2);
PTL::SetPipettingState("DispensePrerinsingMixVolume", 50);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.Tips, ML_STAR.Samples, ML_STAR.TargetPlate, 1, 1, 100, 0, 1, hslInfinite, hslInfinite, 1, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
// {{ 9 1 0 "93b864f0_288b_4713_97baaf0a1ce7b1f6" "{4FB3C56D-3EF5-4317-8A5B-7CDFAC1CAC8F}"
if (GetSimulationMode( ) != 0)
{ __consume_duration_timer.WaitTimer( hslFalse, hslFalse ); } }
 } oncancelaction {
HSLMETEDLib::HandleCanceledAction( Translate( "Pipette 1000ul Channels" ) );
 } }

// }} ""
// {{ 10 1 0 "fb5f50be_184b_440a_b4f97e1edc23262c" "{4FB3C56D-3EF5-4317-8A5B-7CDFAC1CAC8F}"
{
actionblock( 120, 128, Translate( "Unload" ), 0, "{2D462570-F8B3-4AED-824B-DDFE4D3AE2BD}") {
{ timer __consume_duration_timer("", GetCurrentActivityViewName()); if (GetSimulationMode( ) != 0)
{  __consume_duration_timer.SetTimer( GetCurrentActivityDuration()); }

// }} ""
// {{ 11 1 0 "a9acbc20_8564_4cb0_8eea780d6e58168b" "{CB6F8FE9-BCEF-434c-863A-A7DE77ACFB6E}"
PTL::ResetUnloadingStateAndSequences();
PTL::SetUnloadingState("UserResponseTime", hslInfinite);
PTL::SetUnloadingState("ErrorHandling", 3);
PTL::SetUnloadingSize(4);
PTL::SetUnloadingSequence(0, ML_STAR.TargetPlate, hslFalse, "");
PTL::SetUnloadingSequence(1, ML_STAR.Samples, hslFalse, "");
PTL::SetUnloadingSequence(2, ML_STAR.Reagent, hslFalse, "");
PTL::SetUnloadingSequence(3, ML_STAR.Tips, hslFalse, "");
if( 0 == PTL::Unload(ML_STAR) )
{
    PTL::RaiseRuntimeError(-1540095744, PTL::IDS::smartStepUnload, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
PTL::GetUnloadingSequence(0, ML_STAR.TargetPlate);
PTL::GetUnloadingSequence(1, ML_STAR.Samples);
PTL::GetUnloadingSequence(2, ML_STAR.Reagent);
PTL::GetUnloadingSequence(3, ML_STAR.Tips);
// }} ""
// {{ 12 1 0 "fb5f50be_184b_440a_b4f97e1edc23262c" "{4FB3C56D-3EF5-4317-8A5B-7CDFAC1CAC8F}"
if (GetSimulationMode( ) != 0)
{ __consume_duration_timer.WaitTimer( hslFalse, hslFalse ); } }
 } oncancelaction {
HSLMETEDLib::HandleCanceledAction( Translate( "Unload" ) );
 } }

// }} ""
// {{ 2 "AutoExitBlock" ""
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Sophytes$$valid=0$$time=2021-01-03 16:43$$checksum=3806ba1c$$length=087$$